 package conejo.stanford.conejo;

import android.content.Intent;
import android.media.Image;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

import java.util.Arrays;
import java.util.Collections;

import me.crosswall.lib.coverflow.CoverFlow;
import me.crosswall.lib.coverflow.core.PagerContainer;

 public class similar_items extends AppCompatActivity {
    private MyPagerAdapter adapter;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_similar_items);

        //Get data from previous activity to lad
        Intent intent = getIntent();
        String type = intent.getStringExtra("type");
        int id = intent.getIntExtra("id",R.mipmap.pants_1);
        loadUI(type, id);

        if(type.equals("Shoes")){
            initCarousels((PagerContainer) findViewById(R.id.item_container), DemoData.shoes);
        }else if(type.equals("Shirts")){
            initCarousels((PagerContainer) findViewById(R.id.item_container), DemoData.shirts);
        }else{
            initCarousels((PagerContainer) findViewById(R.id.item_container), DemoData.pants);
        }
    }

    private void loadUI(String type, int id){
        TextView description =  (TextView) findViewById(R.id.description);
        ImageView mainImg = (ImageView) findViewById(R.id.main_display);
        TextView title = (TextView) findViewById(R.id.item_name);
        description.setText(generateDescription(type));
        mainImg.setImageResource(id);
    }

    /*
    * Autogenerated description style:
    * [accesoryType] from [brand]'s [Holiday Season] + [year] collection
    * \n\n
    * Your size: [random XS, S, M, L, XL, XXL]\n
    * Price: $[random Val]
    */

    private String generateDescription(String type){
        String description = type;
        if(type.equals("Shoes")){
            description += " from " +
                    DemoData.randItem(DemoData.shoeBrands) + "'s " +
                    DemoData.randItem(DemoData.holidaySeason) + " " +
                    DemoData.randYear() + " collection"+
                    "\n\n"+
                    "Your Size: " + DemoData.randItem(DemoData.shoeSizes)+
                    "\n"+
                    "Price: $" + DemoData.randPrice();
        }else{
            description += " from " +
                    DemoData.randItem(DemoData.shirtPantBrands) + "'s " +
                    DemoData.randItem(DemoData.holidaySeason) + " " +
                    DemoData.randYear() + " collection"+
                    "\n\n"+
                    "Your Size: " + DemoData.randItem(DemoData.shirtPantSizes)+
                    "\n"+
                    "Price: $" + DemoData.randPrice();
        }

        return description;
    }

     private void initCarousels(PagerContainer container, int[] list) {
         ViewPager pager = container.getViewPager();
         //Currently used as the method to get the adapters returns a bizzarre incomplete adapter

             adapter = new MyPagerAdapter(list);
             pager.setAdapter(adapter);

             pager.setClipChildren(false);
             pager.setOffscreenPageLimit(15);
             boolean showTransformer = getIntent().getBooleanExtra("showTransformer", true);
             if (showTransformer) {

                 new CoverFlow.Builder()
                         .with(pager)
                         .scale(0.15f)
                         .pagerMargin(getResources().getDimensionPixelSize(R.dimen.pager_margin))
                         .spaceSize(0f)
                         .build();

             } else {
                 pager.setPageMargin(30);
             }
     }

     //Carousel Adapter
     //Should reimplement using arrayAdapter to improve speed
     class MyPagerAdapter extends PagerAdapter {
         private int[] listBackup;
         private int[] list;

         MyPagerAdapter(int[] passed){
             list = passed;
             listBackup = passed.clone();
         }

         @Override
         public Object instantiateItem(ViewGroup container, int position) {

             View view = LayoutInflater.from(similar_items.this).inflate(R.layout.item_cover_buy,null);
             ImageView imageView = (ImageView) view.findViewById(R.id.image_cover);
             imageView.setImageDrawable(getResources().getDrawable(list[position]));
             imageView.setScaleType(ImageView.ScaleType.FIT_CENTER);
             Button buyBtn = (Button) view.findViewById(R.id.buyBtn);
             buyBtn.setText("Buy $"+DemoData.randPrice());
             view.setTag(position);
             view.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View v) {
                     int position=(Integer)v.getTag();

                 }
             });

             container.addView(view);
             return view;
         }

         @Override
         public void destroyItem(ViewGroup container, int position, Object object) {
             container.removeView((View)object);
         }

         @Override
         public int getCount() {
             return list.length;
         }

         @Override
         public boolean isViewFromObject(View view, Object object) {
             return (view == object);
         }

         public void randomSelect(){
             list = new int[(int)(Math.random()*listBackup.length + 1)];
             int[] temp = listBackup.clone();
             Collections.shuffle(Arrays.asList(temp));

             for(int i = 0; i < list.length; i++){
                 list[i] = temp[i];
             }

             this.notifyDataSetChanged();
         }

         //Not the most desirable fix, essentially reloads the carousel, inneficient for large ones
         @Override
         public int getItemPosition(Object object){
             return POSITION_NONE;
         }
     }

}
